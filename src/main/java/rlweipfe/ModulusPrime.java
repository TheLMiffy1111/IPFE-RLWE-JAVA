package rlweipfe;

import java.io.Serializable;
import java.math.BigInteger;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

/**
 * A number that can be used in a modulus chain, with phi^2^exp = -1 mod q
 */
public record ModulusPrime(int exp, int q, int phi) implements Comparable<ModulusPrime>, Serializable {

	/**
	 * Holds pre-computed values of modulus primes from exp = 6 to 19.
	 */
	public static final Map<Integer, NavigableMap<Integer, ModulusPrime>> PRIMES;

	public ModulusPrime(int exp, int q, int phi) {
		this.exp = exp;
		this.q = q;
		this.phi = phi;
		// Check if phi is a valid root to the used polynomial
		if(phiBigInt().modPow(BigInteger.valueOf(1 << exp), qBigInt()).intValueExact() != q-1) {
			throw new IllegalArgumentException("invalid phi");
		}
	}

	public BigInteger qBigInt() {
		return BigInteger.valueOf(q);
	}

	public BigInteger phiBigInt() {
		return BigInteger.valueOf(phi);
	}

	@Override
	public int compareTo(ModulusPrime o) {
		int a = Integer.compare(exp, o.exp);
		if(a != 0) {
			return a;
		}
		return Integer.compareUnsigned(q, o.q);
	}

	/**
	 * @param exp The exponent to use
	 * @param minQ The minimum q to reach
	 * @return A list of numbers such that the total product is larger than minQ
	 */
	public static Map.Entry<BigInteger, ModulusPrime[]> getPrimes(int exp, BigInteger minQ) {
		if(!PRIMES.containsKey(exp)) {
			throw new IllegalArgumentException("exponent "+exp+" out of range");
		}
		NavigableMap<Integer, ModulusPrime> map = new TreeMap<>(PRIMES.get(exp));
		ModulusPrime minPrime = map.firstEntry().getValue();
		Set<ModulusPrime> primes = new TreeSet<>();
		BigInteger origMinQ = minQ;
		BigInteger q = BigInteger.ONE;
		while(minQ.compareTo(BigInteger.ZERO) > 0 && !primes.contains(minPrime)) {
			ModulusPrime prime;
			if(minQ.compareTo(map.lastEntry().getValue().qBigInt()) > 0) {
				prime = map.pollLastEntry().getValue();
			}
			else {
				prime = map.remove(map.ceilingKey(minQ.intValueExact()));
			}
			primes.add(prime);
			minQ = minQ.divide(prime.qBigInt());
			q = q.multiply(prime.qBigInt());
		}
		if(q.compareTo(origMinQ) < 0) {
			throw new IllegalArgumentException("q too large or something went wrong");
		}
		return Map.entry(q, primes.toArray(ModulusPrime[]::new));
	}

	private static void addToMap(Map<Integer, ModulusPrime> map, int exp, int[] primes, int[] phis) {
		assert primes.length == phis.length;
		for(int i = 0; i < primes.length; ++i) {
			int prime = primes[i];
			int phi = phis[i];
			map.put(prime, new ModulusPrime(exp, prime, phi));
		}
	}

	static {
		HashMap<Integer, NavigableMap<Integer, ModulusPrime>> map = new HashMap<>(14);

		TreeMap<Integer, ModulusPrime> map6 = new TreeMap<>();
		int[] primes6 = {257, 769, 3329, 7681, 7937, 12289, 13313, 14593, 15361, 18433, 25601, 30977, 32257, 40961, 49409, 50177, 57601, 58369, 59393, 61441, 64513, 65537, 98561, 114689, 115201, 129281, 130817, 133121, 147457, 163841, 246017, 249857, 254209, 254977, 260609, 262657, 270337, 393473, 394241, 495617, 520193, 522497, 523777, 524801, 525313, 557057, 786433, 790529, 918529, 921601, 925697, 1017857, 1032193, 1044737, 1047041, 1049089, 1179649, 1589249, 1843201, 1966337, 2081281, 2095361, 2101249, 3686401, 3735553, 4079617, 4161793, 4162049, 4165633, 4169729, 4178177, 4187137, 4188161, 4191233, 6291713, 6307841, 7340033, 7342081, 8128513, 8134657, 8159233, 8257537, 8258561, 8273921, 8372737, 8380417, 8386817, 8404993, 8519681, 8650753, 12587009, 12599297, 13631489, 14681089, 14684161, 14942209, 15728897, 15732737, 16254977, 16261121, 16269313, 16384001, 16515073, 16519169, 16580609, 16646401, 16646657, 16650241, 16744961, 16760833, 16769281, 16769537, 16770049, 16776961, 16777729, 25166081, 25231361, 26214401, 29360641, 29368321, 29884417, 33031169, 33292289, 33292801, 33521921, 33538049, 33540097, 33546497, 33550337, 33550849, 33552641, 50332673, 58720513, 58720769, 58851329, 65028097, 65044481, 65077249, 66846977, 66994177, 67043329, 67076353, 67084289, 67092737, 67104769, 67239937, 69206017, 100679681, 101711873, 104857601, 117964801, 125833217, 130056193, 132120577, 133963777, 134185217, 134203393, 134210561, 134215681, 134250497, 134348801, 136314881, 138412033, 167772161, 234881281, 234889217, 251662337, 260048897, 260055041, 260063233, 260571137, 264241409, 264245249, 264306689, 266339329, 266340353, 267911681, 267943937, 268042241, 268173569, 268177409, 268189697, 268238849, 268369921, 270532609, 469762049, 520101889, 528482561, 532677121, 532709377, 535822849, 536350721, 536608769, 536610817, 536616961, 536641537, 536743937, 536813569, 536856577, 536870401, 536870657, 536903681, 537133057, 805322753, 939524353, 939528193, 939655169, 940572673, 943718401, 1007681537, 1040187649, 1040189441, 1040203777, 1040220161, 1056980993, 1065357313, 1065484289, 1073218049, 1073218561, 1073233921, 1073479681, 1073643521, 1073692673, 1073738753, 1073750017, 1073872897, 1074266113, 1107296257, 1610613761, 1610629121, 1879050241, 2013265921, 2013331457, 2080376833, 2080505857, 2088763393, 2113929217, 2113930241, 2113945601, 2114191361, 2114977793, 2130706433, 2145390593, 2146437121, 2146959361, 2146963457, 2147352577, 2147352833, 2147475713, 2147483137};
		int[] phis6 = {9, 5, 33, 202, 29, 81, 272, 491, 100, 199, 215, 50, 2523, 223, 130, 1354, 506, 960, 111, 1162, 774, 2469, 2092, 1090, 709, 525, 350, 6409, 3033, 3872, 10870, 8211, 12122, 3767, 11583, 2821, 852, 3864, 12717, 5447, 11369, 15915, 18988, 1429, 2987, 16784, 44647, 22660, 32500, 943, 2144, 4637, 2354, 4696, 15645, 10743, 35337, 15212, 53645, 90184, 47185, 59615, 117844, 14178, 1302, 71608, 28300, 71620, 1770, 66527, 25424, 81304, 45290, 159514, 73291, 118797, 23061, 163705, 5734, 72452, 16403, 162285, 72089, 38038, 79707, 394148, 115043, 287322, 213691, 27020, 397, 368500, 348841, 196659, 92872, 16420, 37751, 224220, 6469, 84055, 69781, 141197, 326592, 436231, 90347, 49425, 43736, 1004354, 11519, 224456, 402994, 214108, 319079, 161113, 198310, 91549, 63034, 250031, 138474, 643986, 176502, 987280, 84326, 50128, 736641, 76436, 986786, 982890, 382160, 53824, 223638, 2329101, 91126, 1632022, 761360, 4323026, 1063022, 142059, 672953, 3460578, 260876, 1361383, 1099066, 706652, 1020442, 1513685, 2033047, 712407, 2975706, 1499650, 1612793, 1498327, 1484607, 279539, 1115646, 3348980, 3977035, 3871815, 2609317, 1643345, 3381777, 578977, 1586568, 370529, 395543, 6381933, 1915762, 4149678, 5601753, 2529557, 4815730, 3575350, 3778151, 4159004, 5373316, 7519553, 1278573, 13615451, 2032291, 444646, 1982459, 5607439, 1666775, 3179002, 2841557, 3032471, 3252688, 8975483, 7840707, 9157557, 2160946, 11808411, 4759544, 9985081, 2883057, 17772122, 4762074, 1179297, 6332332, 17892477, 4293626, 473641, 16764616, 3932, 17101492, 12279241, 20853257, 10300107, 18104592, 5052208, 524334, 22848155, 838953, 23859627, 13839430, 23788807, 24956948, 9582974, 14098935, 17979992, 9269587, 26135320, 2069058, 2727887, 31489074, 4281004, 43505725, 2667726, 22142280, 1468782, 1221162, 7658004, 58616600, 6093224, 8403246, 5187036, 40372629, 1983594, 62072360, 31044434, 24063297, 13824221, 15017567, 26541120, 112504349, 53128747, 29217770, 28589031, 27404965, 31714661};
		addToMap(map6, 6, primes6, phis6);
		map.put(6, Collections.unmodifiableNavigableMap(map6));

		TreeMap<Integer, ModulusPrime> map7 = new TreeMap<>();
		int[] primes7 = {257, 769, 7681, 7937, 12289, 13313, 15361, 18433, 25601, 32257, 40961, 50177, 58369, 59393, 61441, 64513, 65537, 114689, 115201, 130817, 133121, 147457, 163841, 249857, 254977, 260609, 262657, 270337, 394241, 495617, 520193, 523777, 524801, 525313, 557057, 786433, 790529, 918529, 921601, 925697, 1017857, 1032193, 1047041, 1049089, 1179649, 1589249, 1843201, 2081281, 2101249, 3686401, 3735553, 4079617, 4162049, 4165633, 4169729, 4187137, 4188161, 4191233, 6307841, 7340033, 7342081, 8128513, 8134657, 8159233, 8257537, 8258561, 8273921, 8372737, 8380417, 8404993, 8519681, 8650753, 12587009, 12599297, 13631489, 14681089, 14684161, 14942209, 15732737, 16254977, 16261121, 16269313, 16384001, 16515073, 16519169, 16580609, 16646657, 16650241, 16744961, 16760833, 16769537, 16770049, 16776961, 16777729, 25231361, 26214401, 29360641, 29368321, 29884417, 33031169, 33292289, 33292801, 33538049, 33540097, 33550337, 33550849, 50332673, 58720769, 58851329, 65028097, 65044481, 65077249, 66994177, 67043329, 67084289, 67104769, 67239937, 69206017, 100679681, 101711873, 104857601, 117964801, 125833217, 130056193, 132120577, 133963777, 134203393, 134210561, 134215681, 134250497, 134348801, 136314881, 138412033, 167772161, 234889217, 251662337, 260048897, 260055041, 260063233, 260571137, 264245249, 264306689, 266339329, 266340353, 267911681, 267943937, 268042241, 268177409, 268189697, 268238849, 268369921, 270532609, 469762049, 520101889, 532677121, 532709377, 535822849, 536350721, 536608769, 536610817, 536616961, 536641537, 536743937, 536813569, 536856577, 536870401, 536870657, 536903681, 537133057, 805322753, 939528193, 939655169, 940572673, 943718401, 1007681537, 1040189441, 1040203777, 1040220161, 1056980993, 1065357313, 1065484289, 1073218049, 1073218561, 1073233921, 1073479681, 1073643521, 1073692673, 1073738753, 1073750017, 1073872897, 1074266113, 1107296257, 1610613761, 1610629121, 1879050241, 2013265921, 2013331457, 2080376833, 2080505857, 2088763393, 2113929217, 2113930241, 2113945601, 2114191361, 2114977793, 2130706433, 2145390593, 2146437121, 2146959361, 2146963457, 2147352577, 2147483137};
		int[] phis7 = {3, 7, 198, 71, 9, 225, 10, 36, 233, 79, 82, 1226, 390, 1055, 137, 1018, 141, 1153, 539, 667, 1143, 2262, 282, 1364, 1263, 644, 4607, 1768, 856, 7647, 7222, 390, 13971, 2006, 2089, 2723, 2688, 11364, 1195, 3715, 655, 7069, 12934, 20861, 893, 12846, 7599, 6055, 9177, 102646, 85545, 29417, 16841, 112572, 68953, 38388, 47376, 1482, 60897, 129913, 15008, 188224, 114595, 112370, 11561, 4311, 34622, 49799, 169688, 56156, 209147, 39291, 141082, 62524, 11407, 62364, 5019, 81604, 74726, 62785, 87710, 103178, 210930, 45927, 152316, 21285, 241698, 75519, 108674, 145829, 138039, 21319, 26462, 100156, 70783, 131118, 99557, 26161, 513738, 84573, 26930, 639845, 242917, 373307, 375524, 232, 243216, 191072, 102068, 1018459, 2042746, 455129, 281443, 1233474, 512211, 622480, 379371, 286968, 304610, 382615, 410791, 948798, 1604758, 1235482, 1603061, 696781, 1127984, 364066, 282197, 67774, 1566332, 2765742, 1595831, 5492411, 1173068, 692339, 23147, 3987043, 760797, 445229, 100361, 1557451, 1678076, 647350, 1232636, 1915631, 2988991, 101494, 2571307, 2752907, 4690923, 776052, 1473062, 8098989, 3017726, 1475886, 3527129, 3887032, 213942, 2275567, 678198, 1238676, 5202723, 4892575, 506887, 26397, 2263780, 2627553, 791538, 5066380, 96265, 15189143, 3289178, 4459518, 2441570, 12962026, 7496496, 4239107, 3205771, 686819, 672200, 15426508, 12488590, 3434463, 3582480, 1891449, 214935, 23710104, 2720947, 2719821, 1270484, 11919115, 8781813, 10810677, 5613145, 23671793, 13293763, 48334355, 1701555, 7642691, 14204405, 7891186, 630956, 2744551, 20161575, 2513052, 3689687, 4259258, 20319301, 14344463, 8594145, 15976288};
		addToMap(map7, 7, primes7, phis7);
		map.put(7, Collections.unmodifiableNavigableMap(map7));

		TreeMap<Integer, ModulusPrime> map8 = new TreeMap<>();
		int[] primes8 = {7681, 12289, 13313, 15361, 18433, 25601, 32257, 40961, 50177, 58369, 59393, 61441, 64513, 65537, 114689, 133121, 147457, 163841, 249857, 254977, 270337, 394241, 495617, 520193, 523777, 525313, 557057, 786433, 790529, 918529, 921601, 925697, 1017857, 1032193, 1179649, 1589249, 1843201, 2101249, 3686401, 3735553, 4079617, 4165633, 4169729, 4187137, 4188161, 4191233, 6307841, 7340033, 7342081, 8128513, 8134657, 8159233, 8257537, 8258561, 8273921, 8380417, 8404993, 8519681, 8650753, 12587009, 12599297, 13631489, 14681089, 14684161, 14942209, 15732737, 16254977, 16261121, 16269313, 16384001, 16515073, 16519169, 16580609, 16650241, 16760833, 16770049, 25231361, 26214401, 29368321, 29884417, 33031169, 33292289, 33538049, 33540097, 33550337, 50332673, 58851329, 65028097, 65044481, 65077249, 66994177, 67043329, 67084289, 67104769, 67239937, 69206017, 100679681, 101711873, 104857601, 117964801, 125833217, 130056193, 132120577, 133963777, 134203393, 134210561, 134215681, 134250497, 134348801, 136314881, 138412033, 167772161, 234889217, 251662337, 260048897, 260055041, 260063233, 260571137, 264245249, 264306689, 266339329, 266340353, 267943937, 268042241, 268177409, 268189697, 268238849, 268369921, 270532609, 469762049, 520101889, 532709377, 536350721, 536608769, 536610817, 536616961, 536641537, 536743937, 536813569, 536856577, 536870401, 536903681, 537133057, 805322753, 939528193, 939655169, 940572673, 943718401, 1007681537, 1040189441, 1040203777, 1040220161, 1056980993, 1065357313, 1065484289, 1073218561, 1073233921, 1073479681, 1073643521, 1073692673, 1073738753, 1073750017, 1073872897, 1074266113, 1107296257, 1610613761, 1610629121, 1879050241, 2013265921, 2013331457, 2080376833, 2080505857, 2088763393, 2113929217, 2113930241, 2113945601, 2114191361, 2114977793, 2130706433, 2145390593, 2146437121, 2146959361, 2146963457, 2147352577, 2147483137};
		int[] phis8 = {62, 3, 15, 98, 6, 114, 330, 248, 66, 125, 41, 60, 426, 157, 1107, 348, 133, 143, 325, 3694, 506, 918, 3511, 7076, 3000, 5158, 293, 724, 57, 1088, 588, 566, 4052, 2365, 2999, 4354, 1874, 14119, 4637, 3031, 36017, 14809, 3339, 19348, 41740, 2225, 356, 8735, 190998, 32158, 1845, 19361, 8254, 46971, 63636, 1753, 35544, 21153, 39928, 19251, 53153, 30428, 1679, 72292, 162112, 31465, 30370, 9355, 82858, 57360, 122472, 44983, 80031, 48146, 74335, 18554, 58872, 13354, 44868, 18974, 211205, 38753, 60094, 234877, 158302, 74020, 104076, 312972, 242323, 139572, 259936, 274619, 342221, 665909, 396740, 80247, 316072, 64997, 819352, 65070, 523339, 1468605, 328869, 269987, 131408, 969894, 765483, 218796, 156279, 430744, 1065830, 231394, 324513, 51145, 2835188, 506184, 255834, 2032326, 1474044, 4159706, 447774, 1567346, 805210, 404508, 606394, 419324, 280303, 2419351, 287064, 621404, 910893, 2247610, 1488015, 5884944, 1696911, 603998, 406862, 5247669, 4316007, 4221761, 1519049, 2180885, 3957281, 2825616, 3693837, 11718941, 3467843, 90473, 4177140, 2256134, 4515055, 3975914, 1733429, 15997788, 4277896, 7470624, 1115612, 7739825, 5053177, 1453919, 6984420, 10314658, 2522651, 9151369, 3886355, 1634552, 749265, 20021969, 16303300, 18707197, 14810396, 7240414, 1813487, 2303758, 18050802, 1340054, 20020599, 5368048, 1506173, 814913, 1115581, 8620388, 4808849, 1776538, 906224};
		addToMap(map8, 8, primes8, phis8);
		map.put(8, Collections.unmodifiableNavigableMap(map8));

		TreeMap<Integer, ModulusPrime> map9 = new TreeMap<>();
		int[] primes9 = {12289, 15361, 18433, 40961, 59393, 61441, 64513, 65537, 114689, 133121, 147457, 163841, 249857, 270337, 495617, 520193, 557057, 786433, 790529, 921601, 925697, 1017857, 1032193, 1179649, 1589249, 1843201, 2101249, 3686401, 3735553, 4079617, 4165633, 4169729, 4188161, 6307841, 7340033, 7342081, 8128513, 8134657, 8159233, 8257537, 8273921, 8380417, 8404993, 8519681, 8650753, 12587009, 12599297, 13631489, 14684161, 14942209, 15732737, 16254977, 16261121, 16269313, 16384001, 16515073, 16519169, 16580609, 16650241, 16760833, 25231361, 26214401, 29368321, 29884417, 33292289, 33538049, 33540097, 33550337, 58851329, 65028097, 65044481, 65077249, 66994177, 67043329, 67084289, 67104769, 67239937, 69206017, 100679681, 101711873, 104857601, 117964801, 125833217, 130056193, 132120577, 133963777, 134203393, 134215681, 134250497, 134348801, 136314881, 138412033, 167772161, 234889217, 251662337, 260048897, 260055041, 260063233, 260571137, 264245249, 264306689, 266340353, 267943937, 268042241, 268177409, 268189697, 268238849, 268369921, 270532609, 469762049, 520101889, 532709377, 536350721, 536608769, 536610817, 536616961, 536641537, 536743937, 536813569, 536856577, 536903681, 537133057, 805322753, 939528193, 939655169, 940572673, 943718401, 1007681537, 1040189441, 1040203777, 1040220161, 1056980993, 1065357313, 1065484289, 1073233921, 1073479681, 1073643521, 1073692673, 1073750017, 1073872897, 1074266113, 1107296257, 1610629121, 1879050241, 2013265921, 2013331457, 2080376833, 2080505857, 2088763393, 2113929217, 2113945601, 2114191361, 2114977793, 2130706433, 2145390593, 2146437121, 2146959361, 2146963457, 2147352577};
		int[] phis9 = {49, 84, 159, 40, 9, 21, 156, 431, 181, 454, 216, 245, 333, 431, 548, 959, 28, 361, 81, 4314, 1187, 1641, 5726, 4725, 948, 7503, 1745, 24234, 15184, 12314, 5938, 2379, 4897, 7000, 12625, 14552, 42242, 5598, 2038, 8540, 11878, 10730, 2893, 5222, 4995, 32944, 1468, 27734, 40408, 156712, 12614, 45472, 77753, 27552, 55873, 6334, 17245, 37027, 23882, 45355, 135971, 59522, 57881, 8744, 1271, 3482, 108912, 68182, 125832, 119112, 113011, 388413, 20024, 129855, 160464, 135157, 403174, 415111, 214026, 292048, 4891, 66105, 57968, 233394, 469371, 58003, 92174, 78074, 75891, 378500, 52026, 128257, 160114, 523069, 567428, 98594, 519275, 645387, 2225017, 882263, 1769251, 618809, 328659, 200916, 125027, 946669, 312111, 1562592, 1166103, 1445473, 913545, 948490, 849417, 4915029, 1597986, 1685595, 976355, 1044522, 126639, 2795221, 2458588, 122196, 34406, 753796, 1752711, 851539, 701441, 732983, 1811354, 12016, 2651, 550071, 1022521, 3267494, 3700831, 4047416, 1366294, 5401247, 2361434, 501981, 9089154, 4825779, 5526768, 2255636, 11377661, 1159074, 1274937, 18721164, 1269308, 4920412, 5433822, 1173798, 4335632, 2709806, 11846530, 172698, 3328852, 7103971, 1145914};
		addToMap(map9, 9, primes9, phis9);
		map.put(9, Collections.unmodifiableNavigableMap(map9));

		TreeMap<Integer, ModulusPrime> map10 = new TreeMap<>();
		int[] primes10 = {12289, 40961, 61441, 65537, 114689, 147457, 163841, 249857, 270337, 495617, 520193, 557057, 786433, 790529, 921601, 925697, 1032193, 1179649, 1589249, 1843201, 2101249, 3686401, 3735553, 4079617, 4165633, 4169729, 6307841, 7340033, 8134657, 8159233, 8257537, 8273921, 8380417, 8404993, 8519681, 8650753, 12587009, 12599297, 13631489, 14684161, 14942209, 15732737, 16261121, 16269313, 16384001, 16515073, 16519169, 16580609, 16650241, 16760833, 25231361, 26214401, 29368321, 29884417, 33292289, 33538049, 33550337, 58851329, 65028097, 65044481, 65077249, 66994177, 67043329, 67084289, 67104769, 67239937, 69206017, 100679681, 101711873, 104857601, 117964801, 125833217, 130056193, 132120577, 133963777, 134215681, 134250497, 134348801, 136314881, 138412033, 167772161, 234889217, 251662337, 260055041, 260063233, 260571137, 264245249, 264306689, 267943937, 268042241, 268177409, 268189697, 268238849, 268369921, 270532609, 469762049, 520101889, 532709377, 536350721, 536608769, 536616961, 536641537, 536743937, 536813569, 536903681, 537133057, 805322753, 939528193, 939655169, 940572673, 943718401, 1007681537, 1040203777, 1040220161, 1056980993, 1065357313, 1065484289, 1073233921, 1073479681, 1073643521, 1073692673, 1073750017, 1073872897, 1074266113, 1107296257, 1610629121, 2013265921, 2013331457, 2080505857, 2088763393, 2113929217, 2113945601, 2114191361, 2114977793, 2130706433, 2145390593, 2146959361, 2146963457, 2147352577};
		int[] phis10 = {7, 32, 61, 33, 16, 162, 171, 214, 174, 84, 98, 119, 19, 9, 1715, 657, 778, 2126, 1848, 4403, 5180, 1170, 1565, 6521, 5231, 3115, 6630, 4941, 88, 9824, 1938, 12034, 1306, 16204, 24184, 1896, 10645, 4492, 324, 17338, 3042, 74378, 31061, 16612, 5875, 28431, 12762, 271, 1189, 21142, 13225, 15338, 15754, 31336, 10887, 27301, 3037, 21989, 46302, 30676, 131377, 186977, 25439, 24229, 195478, 9940, 87555, 452182, 149980, 5549, 28160, 282622, 135517, 73993, 16711, 282116, 115199, 26084, 3204, 7677, 182946, 561456, 250400, 69215, 110079, 58782, 139314, 345610, 189862, 312668, 400918, 145938, 64042, 326097, 50499, 286165, 31739, 784324, 1671805, 471178, 576957, 108569, 241084, 1407307, 61194, 1046891, 1375429, 364270, 829095, 170663, 59454, 3468000, 2566616, 200236, 1264460, 7552944, 819993, 560322, 746927, 712747, 362359, 995522, 1072340, 1203152, 667143, 438882, 1289288, 38731, 208025, 957120, 4544528, 3095472, 1825278, 1338897, 892843, 2342043, 662778, 126071, 1931061};
		addToMap(map10, 10, primes10, phis10);
		map.put(10, Collections.unmodifiableNavigableMap(map10));

		TreeMap<Integer, ModulusPrime> map11 = new TreeMap<>();
		int[] primes11 = {12289, 40961, 61441, 65537, 114689, 147457, 163841, 270337, 520193, 557057, 786433, 925697, 1032193, 1179649, 1589249, 1843201, 3686401, 3735553, 4079617, 4169729, 6307841, 7340033, 8134657, 8159233, 8257537, 8273921, 8380417, 8404993, 8519681, 8650753, 12599297, 13631489, 14942209, 16261121, 16269313, 16384001, 16515073, 16580609, 16760833, 25231361, 26214401, 29368321, 29884417, 33292289, 33538049, 33550337, 58851329, 65028097, 65044481, 65077249, 66994177, 67043329, 67084289, 67104769, 67239937, 69206017, 100679681, 101711873, 104857601, 117964801, 130056193, 132120577, 133963777, 134250497, 134348801, 136314881, 138412033, 167772161, 234889217, 260055041, 260063233, 260571137, 264306689, 267943937, 268042241, 268189697, 268238849, 268369921, 270532609, 469762049, 520101889, 532709377, 536608769, 536616961, 536641537, 536813569, 536903681, 537133057, 805322753, 939655169, 940572673, 943718401, 1007681537, 1040203777, 1040220161, 1056980993, 1065484289, 1073233921, 1073479681, 1073643521, 1073692673, 1073750017, 1073872897, 1074266113, 1107296257, 1610629121, 2013265921, 2013331457, 2080505857, 2088763393, 2113929217, 2113945601, 2114191361, 2114977793, 2130706433, 2146959361, 2147352577};
		int[] phis11 = {41, 28, 19, 21, 4, 41, 38, 114, 71, 66, 14, 822, 488, 202, 46, 650, 1144, 2014, 306, 289, 385, 1851, 3964, 3400, 904, 9100, 2741, 2687, 5111, 9628, 1192, 18, 1071, 10119, 6662, 3603, 2046, 71, 583, 115, 26404, 2302, 18346, 30038, 31815, 9066, 30423, 5591, 26520, 12395, 26993, 35588, 34856, 20150, 8151, 11657, 53238, 4890, 141715, 49045, 71246, 160172, 2409, 32670, 55412, 46291, 32177, 35463, 572772, 225281, 237510, 350879, 53479, 155448, 156233, 159366, 55823, 66687, 191305, 153032, 227963, 173911, 284166, 201332, 490265, 145054, 127598, 760590, 643152, 279452, 130808, 359397, 625506, 299802, 527245, 672605, 391062, 155476, 205148, 255615, 42341, 564843, 188554, 213028, 80143, 300170, 3447916, 2407119, 707456, 2654348, 3434582, 1024379, 1504402, 3851789, 395861, 398911, 377430};
		addToMap(map11, 11, primes11, phis11);
		map.put(11, Collections.unmodifiableNavigableMap(map11));

		TreeMap<Integer, ModulusPrime> map12 = new TreeMap<>();
		int[] primes12 = {65537, 114689, 147457, 163841, 557057, 786433, 1032193, 1179649, 1589249, 3686401, 3735553, 4079617, 6307841, 7340033, 8159233, 8257537, 8273921, 8380417, 8404993, 8519681, 8650753, 12599297, 13631489, 14942209, 16269313, 16384001, 16515073, 16580609, 16760833, 25231361, 26214401, 29884417, 33292289, 33538049, 58851329, 65028097, 65044481, 65077249, 66994177, 67043329, 67239937, 69206017, 100679681, 101711873, 104857601, 117964801, 130056193, 132120577, 134250497, 134348801, 136314881, 138412033, 167772161, 260063233, 260571137, 264306689, 267943937, 268042241, 268189697, 268238849, 268369921, 270532609, 469762049, 532709377, 536608769, 536641537, 536903681, 537133057, 805322753, 939655169, 940572673, 943718401, 1007681537, 1040203777, 1040220161, 1056980993, 1065484289, 1073233921, 1073479681, 1073643521, 1073692673, 1073872897, 1074266113, 1107296257, 1610629121, 2013265921, 2013331457, 2080505857, 2088763393, 2113929217, 2113945601, 2114191361, 2114977793, 2130706433, 2146959361, 2147352577};
		int[] phis12 = {13, 2, 65, 25, 474, 804, 194, 476, 364, 755, 293, 2088, 128, 772, 744, 2702, 181, 687, 175, 484, 4751, 1882, 311, 987, 3166, 2580, 690, 2398, 3689, 17421, 3797, 22959, 27628, 2386, 26758, 2093, 33888, 29916, 34258, 21389, 27076, 4148, 5852, 12542, 30958, 49102, 6020, 19447, 33006, 17734, 58559, 17200, 2517, 30582, 28894, 39230, 64144, 17065, 5248, 8592, 62736, 83205, 138724, 208575, 159601, 197026, 235674, 240647, 13649, 253768, 166229, 522387, 275925, 160434, 92596, 168103, 10327, 6407, 769236, 408395, 236231, 259097, 360393, 236910, 129029, 258637, 101451, 204950, 756419, 630379, 317572, 416246, 422165, 456478, 488519, 1689795};
		addToMap(map12, 12, primes12, phis12);
		map.put(12, Collections.unmodifiableNavigableMap(map12));

		TreeMap<Integer, ModulusPrime> map13 = new TreeMap<>();
		int[] primes13 = {65537, 114689, 163841, 557057, 786433, 1032193, 1179649, 3735553, 7340033, 8159233, 8257537, 8519681, 8650753, 13631489, 14942209, 16384001, 16515073, 16580609, 16760833, 25231361, 26214401, 29884417, 33292289, 33538049, 58851329, 65044481, 65077249, 67043329, 67239937, 69206017, 101711873, 104857601, 117964801, 130056193, 132120577, 134250497, 134348801, 136314881, 138412033, 167772161, 260571137, 264306689, 267943937, 268042241, 268238849, 268369921, 270532609, 469762049, 532709377, 536608769, 536641537, 536903681, 537133057, 939655169, 940572673, 943718401, 1007681537, 1040220161, 1065484289, 1073479681, 1073643521, 1073872897, 1074266113, 1107296257, 2013265921, 2013331457, 2080505857, 2088763393, 2113929217, 2114191361, 2114977793, 2130706433, 2146959361, 2147352577};
		int[] phis13 = {15, 15, 5, 268, 43, 94, 337, 729, 1226, 438, 1831, 22, 502, 2023, 575, 485, 545, 5602, 1018, 2780, 880, 1379, 1667, 11613, 4519, 31571, 2357, 4721, 862, 764, 19321, 16502, 19506, 6842, 26186, 2157, 9921, 4200, 729, 80500, 44855, 93531, 49338, 43226, 46661, 65274, 11258, 48341, 45527, 17047, 246107, 78006, 33551, 95299, 148503, 5476, 215522, 20116, 175977, 32138, 97548, 245734, 346345, 553850, 260512, 325176, 112926, 123955, 266798, 477660, 1194918, 238576, 170004, 44302};
		addToMap(map13, 13, primes13, phis13);
		map.put(13, Collections.unmodifiableNavigableMap(map13));

		TreeMap<Integer, ModulusPrime> map14 = new TreeMap<>();
		int[] primes14 = {65537, 786433, 1179649, 3735553, 7340033, 8257537, 8519681, 8650753, 13631489, 14942209, 16384001, 16515073, 16580609, 25231361, 26214401, 29884417, 33292289, 58851329, 65077249, 67043329, 67239937, 69206017, 101711873, 104857601, 117964801, 132120577, 134348801, 136314881, 138412033, 167772161, 260571137, 264306689, 268042241, 268238849, 268369921, 270532609, 469762049, 536608769, 537133057, 939655169, 940572673, 943718401, 1007681537, 1065484289, 1073479681, 1073872897, 1074266113, 1107296257, 2013265921, 2013331457, 2080505857, 2088763393, 2113929217, 2114191361, 2114977793, 2130706433, 2146959361, 2147352577};
		int[] phis14 = {9, 9, 69, 27, 194, 909, 175, 195, 208, 862, 452, 367, 840, 1750, 1978, 496, 3291, 903, 12358, 6695, 8446, 4418, 139, 21334, 1700, 3878, 25576, 13007, 27, 2123, 15509, 4680, 63914, 12308, 10360, 7771, 7748, 21826, 4538, 63159, 9013, 74, 209621, 116765, 65226, 7574, 78381, 41969, 673311, 63021, 33744, 52185, 342851, 27942, 124158, 73657, 295289, 320878};
		addToMap(map14, 14, primes14, phis14);
		map.put(14, Collections.unmodifiableNavigableMap(map14));

		TreeMap<Integer, ModulusPrime> map15 = new TreeMap<>();
		int[] primes15 = {65537, 786433, 1179649, 7340033, 8257537, 8519681, 8650753, 13631489, 14942209, 16384001, 16515073, 26214401, 29884417, 33292289, 58851329, 67043329, 67239937, 69206017, 101711873, 104857601, 117964801, 132120577, 134348801, 136314881, 138412033, 167772161, 260571137, 268042241, 268369921, 270532609, 469762049, 536608769, 537133057, 939655169, 940572673, 943718401, 1007681537, 1065484289, 1073479681, 1073872897, 1074266113, 1107296257, 2013265921, 2080505857, 2088763393, 2113929217, 2114191361, 2114977793, 2130706433, 2146959361, 2147352577};
		int[] phis15 = {3, 3, 14, 83, 31, 347, 96, 169, 83, 225, 1852, 370, 425, 959, 833, 3064, 3539, 3583, 1121, 8035, 5492, 11196, 3199, 882, 4051, 2966, 4963, 23541, 13237, 1000, 17888, 7844, 60638, 30381, 46705, 25507, 24302, 24861, 15589, 31791, 80746, 1329, 54846, 110187, 146798, 27504, 24250, 19481, 16956, 127414, 26651};
		addToMap(map15, 15, primes15, phis15);
		map.put(15, Collections.unmodifiableNavigableMap(map15));

		TreeMap<Integer, ModulusPrime> map16 = new TreeMap<>();
		int[] primes16 = {786433, 7340033, 8257537, 8650753, 13631489, 14942209, 16515073, 21495809, 26214401, 29884417, 33292289, 36175873, 69206017, 101711873, 103284737, 104857601, 111149057, 117964801, 118751233, 132120577, 136314881, 138412033, 151257089, 155189249, 167772161, 169869313, 211812353, 218628097, 239337473, 254279681, 256376833, 260571137, 270532609, 270794753, 277086209, 285474817, 302252033, 336068609, 469762049, 471072769, 487063553, 511967233, 524812289, 536608769, 537133057, 541327361, 570949633, 605028353, 810024961, 824180737, 839385089, 880803841, 940572673, 943718401, 950009857, 957349889, 975175681, 1007681537, 1015283713, 1045430273, 1049100289, 1073479681, 1074266113, 1091043329, 1092616193, 1107296257, 1212153857, 1224736769, 1612972033, 1613234177, 1619263489, 1644429313, 1888485377, 1896087553, 1946419201, 2013265921, 2015887361, 2017984513, 2047082497, 2047868929, 2085093377, 2088763393, 2099249153, 2113929217, 2114191361, 2114977793, 2130706433, 2135162881, 2146959361, 2147352577};
		int[] phis16 = {8, 228, 10, 95, 13, 273, 355, 20, 157, 113, 50, 162, 1546, 5306, 648, 393, 7248, 2844, 3291, 1165, 8939, 1089, 1956, 558, 1263, 73, 1408, 7611, 1845, 415, 1106, 7990, 6279, 142, 1949, 5648, 1035, 13384, 565, 10310, 3593, 8167, 8969, 7069, 9532, 393, 19828, 22991, 10572, 441, 11728, 6580, 24072, 11950, 12128, 31166, 4215, 8068, 8187, 832, 25652, 4051, 4304, 16511, 48026, 21448, 21323, 5255, 120806, 25668, 604, 43863, 21622, 104816, 17073, 37318, 54058, 45642, 41138, 64945, 9289, 31341, 40586, 5817, 31041, 7849, 11177, 3179, 5173, 1859};
		addToMap(map16, 16, primes16, phis16);
		map.put(16, Collections.unmodifiableNavigableMap(map16));

		TreeMap<Integer, ModulusPrime> map17 = new TreeMap<>();
		int[] primes17 = {786433, 7340033, 13631489, 16515073, 21495809, 26214401, 29884417, 33292289, 36175873, 69206017, 101711873, 103284737, 104857601, 111149057, 117964801, 132120577, 136314881, 138412033, 155189249, 167772161, 169869313, 211812353, 218628097, 254279681, 256376833, 260571137, 270532609, 336068609, 469762049, 487063553, 524812289, 536608769, 570949633, 605028353, 810024961, 824180737, 839385089, 880803841, 940572673, 943718401, 950009857, 957349889, 975175681, 1007681537, 1045430273, 1049100289, 1073479681, 1074266113, 1091043329, 1092616193, 1107296257, 1212153857, 1224736769, 1613234177, 1888485377, 2013265921, 2015887361, 2017984513, 2047868929, 2085093377, 2088763393, 2099249153, 2113929217, 2114977793, 2130706433, 2146959361};
		int[] phis17 = {5, 79, 4, 70, 144, 42, 400, 99, 692, 863, 1503, 1143, 1114, 312, 1322, 98, 1540, 33, 2054, 2478, 4204, 723, 2447, 61, 6667, 1757, 2680, 754, 5561, 166, 2276, 3108, 9359, 13784, 434, 21, 6821, 4997, 721, 162, 1124, 2108, 2173, 6161, 3286, 3862, 25785, 103, 15574, 17924, 32429, 1807, 7939, 41897, 9311, 84488, 41066, 7295, 1228, 5730, 2731, 9671, 7425, 10113, 16795, 3829};
		addToMap(map17, 17, primes17, phis17);
		map.put(17, Collections.unmodifiableNavigableMap(map17));

		TreeMap<Integer, ModulusPrime> map18 = new TreeMap<>();
		int[] primes18 = {7340033, 13631489, 26214401, 69206017, 101711873, 104857601, 111149057, 132120577, 136314881, 138412033, 155189249, 167772161, 169869313, 211812353, 270532609, 290455553, 311427073, 469762049, 605028353, 824180737, 880803841, 940572673, 943718401, 950009857, 957349889, 975175681, 1007681537, 1045430273, 1092616193, 1095761921, 1107296257, 1146093569, 1151336449, 1158676481, 1161822209, 1212153857, 1218445313, 1224736769, 1410334721, 1654652929, 1695547393, 1888485377, 1922039809, 1963982849, 2013265921, 2035286017, 2047868929, 2088763393, 2099249153, 2113929217, 2114977793, 2130706433, 2146959361};
		int[] phis18 = {25, 2, 186, 340, 199, 530, 465, 839, 139, 123, 925, 390, 985, 50, 490, 1097, 1764, 500, 787, 4212, 3170, 503, 1740, 1996, 529, 2028, 3582, 737, 5873, 4090, 2466, 6307, 2357, 1753, 3339, 1991, 7493, 303, 1380, 10875, 6056, 9868, 34760, 499, 1266, 5990, 6595, 3025, 1116, 8306, 4406, 1472, 12431};
		addToMap(map18, 18, primes18, phis18);
		map.put(18, Collections.unmodifiableNavigableMap(map18));

		TreeMap<Integer, ModulusPrime> map19 = new TreeMap<>();
		int[] primes19 = {7340033, 26214401, 69206017, 101711873, 104857601, 111149057, 132120577, 136314881, 138412033, 155189249, 167772161, 169869313, 185597953, 211812353, 270532609, 311427073, 361758721, 469762049, 605028353, 655360001, 824180737, 880803841, 907018241, 940572673, 943718401, 950009857, 957349889, 975175681, 1007681537, 1092616193, 1107296257, 1133510657, 1158676481, 1192230913, 1212153857, 1224736769, 1410334721, 1485832193, 1536163841, 1594884097, 1695547393, 1863319553, 1888485377, 1922039809, 1963982849, 2013265921, 2047868929, 2088763393, 2099249153, 2113929217, 2114977793, 2130706433};
		int[] phis19 = {5, 33, 54, 920, 332, 85, 258, 248, 217, 81, 100, 415, 43, 553, 152, 42, 487, 899, 4494, 124, 1683, 529, 3393, 1502, 2314, 1915, 23, 1335, 665, 7517, 350, 2667, 2987, 7971, 6145, 1997, 962, 8849, 1036, 876, 85, 11991, 452, 993, 1320, 1131, 7101, 55, 6472, 3168, 9016, 7437};
		addToMap(map19, 19, primes19, phis19);
		map.put(19, Collections.unmodifiableNavigableMap(map19));

		PRIMES = Collections.unmodifiableMap(map);
	}
}
